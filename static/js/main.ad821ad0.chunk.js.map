{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","RabbitHole","props","state","wikiData","fetch","headers","then","resp","json","console","log","setState","this","lead","sections","map","section","dangerouslySetInnerHTML","__html","text","id","remaining","line","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAYe,SAASA,IACtB,OACE,cAAC,IAAD,UACE,gCAUE,uBAoBA,cAAC,EAAD,S,IAyBFC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,IAHK,E,qDAOnB,WAAqB,IAAD,OAClBC,MAAM,mEAAoE,CACxEC,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACC,GACLE,QAAQC,IAAI,OAAQH,GAEpB,EAAKI,SAAS,CAAER,SAAUI,S,oBAKhC,WACE,OAAO,gCACJK,KAAKV,MAAMC,SAASU,MACrBD,KAAKV,MAAMC,SAASU,KAAKC,UACzBF,KAAKV,MAAMC,SAASU,KAAKC,SAASC,KAAI,SAACC,GAAD,OACpC,qBAEEC,wBAAyB,CAAEC,OAAQF,EAAQG,OADtCH,EAAQI,OAKhBR,KAAKV,MAAMC,SAASkB,WACrBT,KAAKV,MAAMC,SAASkB,UAAUP,UAC9BF,KAAKV,MAAMC,SAASkB,UAAUP,SAASC,KAAI,SAACC,GAAD,OACzC,gCACE,6BAAKA,EAAQM,OACb,qBAAKL,wBAAyB,CAAEC,OAAQF,EAAQG,UAFxCH,EAAQI,c,GArCDG,IAAMC,WC1DhBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACpC,EAAD,MAEFqC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ad821ad0.chunk.js","sourcesContent":["import React from 'react';\nimport { HashRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\n// This site has 3 pages, all of which are rendered\n// dynamically in the browser (not server rendered).\n//\n// Although the page does not ever refresh, notice how\n// React Router keeps the URL up to date as you navigate\n// through the site. This preserves the browser history,\n// making sure things like the back button and bookmarks\n// work properly.\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        {/* <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">About</Link>\n          </li>\n        </ul> */}\n\n        <hr />\n\n        {/* <a href=\"http://en.wikipedia.org/wiki/Special:Random\">Random Wiki Article</a> */}\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        {/* <Switch>\n          <Route exact path=\"/\">\n            <Home /> \n            <RabbitHole /> \n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n        </Switch> */}\n        <RabbitHole />\n      </div>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nfunction About() {\n  return (\n    <div>\n      <h2>About</h2>\n    </div>\n  );\n}\n\nclass RabbitHole extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      wikiData: {},   \n    }\n  }\n\n  componentDidMount() {\n    fetch(`https://en.wikipedia.org/api/rest_v1/page/random/mobile-sections`, {\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((resp) => resp.json())\n      .then((resp) => {\n        console.log('resp', resp);\n\n        this.setState({ wikiData: resp });\n      });\n  }\n\n\n  render() {\n    return <div>\n      {this.state.wikiData.lead &&\n      this.state.wikiData.lead.sections &&\n      this.state.wikiData.lead.sections.map((section) => (\n        <div\n          key={section.id}\n          dangerouslySetInnerHTML={{ __html: section.text }}\n        />\n      ))}\n      \n      {this.state.wikiData.remaining &&\n      this.state.wikiData.remaining.sections &&\n      this.state.wikiData.remaining.sections.map((section) => (\n        <div key={section.id}>\n          <h2>{section.line}</h2>\n          <div dangerouslySetInnerHTML={{ __html: section.text }}/>\n        </div>\n      ))}\n  </div>\n  }\n}","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}